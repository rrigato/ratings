---
AWSTemplateFormatVersion: '2010-09-09'

#Transforms any serverless code to cloudformation
Transform: AWS::Serverless-2016-10-31

Description: |
  Lambda function that updates dynamodb table from
  templates/ratings_backend.yml

Parameters:
  BucketName:
    Type: String
    Default: source-code

  DynamoDbTableName:
    Type: String
    Default: dev_toonami_ratings

  environPrefix:
    Type: String
    Default: dev

  EnableLambdaSchedule:
    Type: String
    Default: false 
    Description: Determines whether lambda function event is enabled   


  PolicyPrefix:
    Type: String
    Default: DevRatingsBackend 
    Description: Policy statements must be AlphaNumeric   

  ProjectName:
    Type: String
    Default: dev-ratings-backend


Resources:

  #SNS Topic that will be published to in case of a lambda error
  ErrorAlertQueue:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        -
          Key: keep
          Value: 'yes'
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function-error-alert']]
      TopicName: !Sub '${ProjectName}-error-topic'

  #alarm that is triggered for lambda function error
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      #SNS topic arn to publish to if number of lambda errors is
      #greater than 0
      AlarmActions: 
        - !Ref ErrorAlertQueue
      AlarmDescription: !Sub '${ProjectName} Lambda Error alert'
      AlarmName: !Sub '${ProjectName}-lambda-poll-error'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Dimensions:
        - Name: 'FunctionName'
          Value: !Sub '${ProjectName}-lambda-poll'
      Namespace: 'AWS/Lambda'
      MetricName: 'Errors'      
      Statistic: 'Sum'
      Period: 7200
      #dont want any greater than 0 errors
      Threshold: 0

  #alarm that is triggeredif there have been no lambda function
  #invocations
  LambdaNoInvocationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      #SNS topic arn to publish to if number of lambda errors is
      #greater than 0
      AlarmActions: 
        - !Ref ErrorAlertQueue
      AlarmDescription: !Sub '${ProjectName} No lambda function invocations'
      AlarmName: !Sub '${ProjectName}LambdaMissingInvocationAlarm'
      ComparisonOperator: LessThanOrEqualToThreshold
      #The functions we want to consider for invocation count
      Dimensions:
        - Name: FunctionName
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-poll']]

      EvaluationPeriods: 1
      #metric statistic for if there was no lambda invocations
      # in the last 24 hours
      MetricName: Invocations
      Namespace: AWS/Lambda
      #every 24 hours
      Period: 86400
      Statistic: Sum
      #Should have a lambda invocation in last 24 hours
      Threshold: 0


  LambdaCodeBucket:
    Properties:
      BucketName: !Join ['-', [ !Ref ProjectName, !Ref BucketName ]]
      Tags:
        -
          Key: keep
          Value: 'yes'
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function']]
    Type: 'AWS::S3::Bucket'

############
#Lambda function to update ratings
#
############
  UpdateRatings:
    Type: AWS::Serverless::Function
    Properties:
      
      #SNS topic that errors will be sent to
      DeadLetterQueue:
        TargetArn: !Ref ErrorAlertQueue
        Type: SNS
                                
      Description: |
        Makes reddit api call on schedule to check for 
        updated ratings
      #passed to os.environ for python used to
      #determine which table to update in scripts.reddit_ratings.main
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
          ENVIRONMENT_PREFIX: !Ref environPrefix
      Events:
        #cloudwatch event rule that runs 
        #every 12 hours        
        ThreeHourCWEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(12 hours)'
            Name: !Sub '${ProjectName}-lambda-poll-trigger'
            Description: Runs reddit_ratings.lambda_handler once every 12 hours
            Enabled: !Ref EnableLambdaSchedule        

      FunctionName: !Join ['-', [ !Ref ProjectName, 'lambda-poll']]
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query

            Resource:
              - '*'        

          #Secrets Manager GetSecret permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaSecretsMangerAllow'
            Effect: Allow
            Action:
              - secretsmanager:GetSecret # pragma: allowlist secret
              - secretsmanager:GetSecretValue # pragma: allowlist secret

            Resource:
              - '*'         

      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 60
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
        -
          Key: keep
          Value: 'yes'
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function']]



############
#Lambda function to perform a monthly ratings 
#table backup
############
  BackupRatingsTable:
    Type: AWS::Serverless::Function
    Properties:
      
      #SNS topic that errors will be sent to
      DeadLetterQueue:
        TargetArn: !Ref ErrorAlertQueue
        Type: SNS
                                
      Description: !Sub |
        Backs up DynamoDB table ${DynamoDbTableName} and 
        validates that ratings have been inserted in the last month

      #passed to os.environ for python used to
      #determine which table to update in scripts.backup_dynamodb_ratings
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
      Events:
        #cloudwatch event rule that runs the lamdbda funciton every 30 days     
        MonthlyCwEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(30 days)'
            Name: !Sub '${ProjectName}-dynamodb-backup-trigger'
            Description: |
              Runs scripts.backup_dynamodb_ratings.lambda_handler once every 30 days
            Enabled: !Ref EnableLambdaSchedule        

      FunctionName: !Join ['-', [ !Ref ProjectName, 'backup-dynamodb']]
      Handler: index.handler

      #256 mbs
      MemorySize: 256
      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:ListBackups
              - dynamodb:CreateBackup
              - dynamodb:DeleteBackup
              - dynamodb:DescribeBackup

            Resource:
              - '*'        

          #Secrets Manager GetSecret permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaSecretsMangerAllow'
            Effect: Allow
            Action:
              - secretsmanager:GetSecret # pragma: allowlist secret
              - secretsmanager:GetSecretValue # pragma: allowlist secret

            Resource:
              - '*'         

      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 60
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
        -
          Key: keep
          Value: 'yes'
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'backup-dynamodb']]




###############################
#DynamoDb table to store ratings
#primary key is a composite of the
#show name and time
###############################
  RatingsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        -
          AttributeName: 'RATINGS_OCCURRED_ON'
          AttributeType: 'S'
        -
          AttributeName: 'TIME'
          AttributeType: 'S'
        -
          AttributeName: 'SHOW'
          AttributeType: 'S'
        -
          AttributeName: 'YEAR'
          AttributeType: 'N'


    #On demand dynamodb
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: 'RATINGS_OCCURRED_ON'
          KeyType: 'HASH'
        -
          AttributeName: 'TIME'
          KeyType: 'RANGE'

      GlobalSecondaryIndexes: 
      #index where all attributes are projected with GSI1_PK as PK
      #and RATINGS_OCCURRED_ON as sort key
        - 
          IndexName: 'SHOW_ACCESS'
          KeySchema: 
            - 
              AttributeName: 'SHOW'
              KeyType: 'HASH'
            - 
              AttributeName: 'RATINGS_OCCURRED_ON'
              KeyType: 'RANGE'

          #project all attributes
          Projection: 
            ProjectionType: 'ALL'
      #index designed for aggregation of data with GSI2_PK
      #as PK and GSI1_PK as sort key
        - 
          IndexName: 'YEAR_ACCESS'
          KeySchema: 
            - 
              AttributeName: 'YEAR'
              KeyType: 'HASH'
            - 
              AttributeName: 'RATINGS_OCCURRED_ON'
              KeyType: 'RANGE'

          #GSI Keys and partition and sort key 
          #for limited storage space
          Projection: 
            ProjectionType: 'ALL'

      #Automated backup for the last 35 days
      PointInTimeRecoverySpecification: 
        PointInTimeRecoveryEnabled: true

      SSESpecification:
          SSEEnabled: true
      TableName: !Ref DynamoDbTableName
      Tags:
        -
          Key: keep
          Value: 'yes'
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'dynamodb']]

###############################
#DynamoDb table to store show names and analytics about toonami ratings
###############################
  showNamesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        -
          AttributeName: 'PK'
          AttributeType: 'S'
        -
          AttributeName: 'SK'
          AttributeType: 'S'

    #On demand dynamodb
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: 'PK'
          KeyType: 'HASH'
        -
          AttributeName: 'SK'
          KeyType: 'RANGE'
      #Automated backup for the last 35 days
      PointInTimeRecoverySpecification: 
        PointInTimeRecoveryEnabled: true

      SSESpecification:
          SSEEnabled: true
      TableName: !Sub '${environPrefix}_toonami_analytics'
      Tags:
        -
          Key: gitrepo
          Value: !Ref ProjectName
        -
          Key: keep
          Value: 'yes'
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'dynamodb']]

        
