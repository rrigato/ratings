---
AWSTemplateFormatVersion: "2010-09-09"

#Transforms any serverless code to cloudformation
Transform: AWS::Serverless-2016-10-31

Description: |
  Lambda function that updates dynamodb table from
  templates/ratings_backend.yml

Parameters:
  BucketName:
    Type: String
    Default: source-code

  DynamoDbTableName:
    Type: String
    Default: dev_toonami_ratings

  EnableLambdaSchedule:
    Type: String
    Default: false 
    Description: Determines whether lambda function event is enabled   


  PolicyPrefix:
    Type: String
    Default: DevRatingsBackend 
    Description: Policy statements must be AlphaNumeric   

  ProjectName:
    Type: String
    Default: dev-ratings-backend


Resources:

  #SNS Topic that will be published to in case of a lambda error
  ErrorAlertQueue:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        -
          Key: keep
          Value: "yes"
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function-error-alert']]
      TopicName: !Sub '${ProjectName}-error-topic'

  LambdaCodeBucket:
    Properties:
      BucketName: !Join ['-', [ !Ref ProjectName, !Ref BucketName ]]
      Tags:
        -
          Key: keep
          Value: "yes"
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function']]
    Type: "AWS::S3::Bucket"

############
#Lambda function to update ratings
#
############
  UpdateRatings:
    Type: AWS::Serverless::Function
    Properties:
      
      #SNS topic that errors will be sent to
      DeadLetterQueue:
        TargetArn: !Ref ErrorAlertQueue
        Type: SNS
                                
      Description: |
        Makes reddit api call on schedule to check for 
        updated ratings
      #passed to os.environ for python used to
      #determine which table to update in scripts.reddit_ratings.main
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
      Events:
        #cloudwatch event rule that runs 
        #every 12 hours        
        ThreeHourCWEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(12 hours)'
            Name: !Sub '${ProjectName}-lambda-poll-trigger'
            Description: Runs reddit_ratings.lambda_handler once every 12 hours
            Enabled: !Ref EnableLambdaSchedule        

      FunctionName: !Join ['-', [ !Ref ProjectName, 'lambda-poll']]
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: "2012-10-17"
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query

            Resource:
              - "*"        

          #Secrets Manager GetSecret permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaSecretsMangerAllow'
            Effect: Allow
            Action:
              - secretsmanager:GetSecret
              - secretsmanager:GetSecretValue

            Resource:
              - "*"         

      Runtime: python3.8
      Tracing: Active
      #60 second timeout
      Timeout: 60
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
        -
          Key: keep
          Value: "yes"
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function']]



############
#Lambda function to perform a monthly ratings 
#table backup
############
  BackupRatingsTable:
    Type: AWS::Serverless::Function
    Properties:
      
      #SNS topic that errors will be sent to
      DeadLetterQueue:
        TargetArn: !Ref ErrorAlertQueue
        Type: SNS
                                
      Description: !Sub |
        Backs up DynamoDB table ${DynamoDbTableName} and 
        validates that ratings have been inserted in the last month

      #passed to os.environ for python used to
      #determine which table to update in scripts.backup_dynamodb_ratings
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDbTableName
      Events:
        #cloudwatch event rule that runs the lamdbda funciton every 30 days     
        MonthlyCwEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(12 hours)'
            Name: !Sub '${ProjectName}-lambda-poll-trigger'
            Description: Runs reddit_ratings.lambda_handler once every 12 hours
            Enabled: !Ref EnableLambdaSchedule        

      FunctionName: !Join ['-', [ !Ref ProjectName, 'lambda-poll']]
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: "2012-10-17"
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:ListTables
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query

            Resource:
              - "*"        

          #Secrets Manager GetSecret permissions     
          - Sid: !Sub '${PolicyPrefix}LambdaSecretsMangerAllow'
            Effect: Allow
            Action:
              - secretsmanager:GetSecret
              - secretsmanager:GetSecretValue

            Resource:
              - "*"         

      Runtime: python3.8
      Tracing: Active
      #60 second timeout
      Timeout: 60
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
        -
          Key: keep
          Value: "yes"
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'lambda-function']]




###############################
#DynamoDb table to store ratings
#primary key is a composite of the
#show name and time
###############################
  RatingsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "RATINGS_OCCURRED_ON"
          AttributeType: "S"
        -
          AttributeName: "TIME"
          AttributeType: "S"

    #On demand dynamodb
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "RATINGS_OCCURRED_ON"
          KeyType: "HASH"
        -
          AttributeName: "TIME"
          KeyType: "RANGE"

      SSESpecification:
          SSEEnabled: true
      TableName: !Ref DynamoDbTableName
      Tags:
        -
          Key: keep
          Value: "yes"
        -
          Key: reason
          Value: !Join ['-', [ !Ref ProjectName, 'dynamodb']]
