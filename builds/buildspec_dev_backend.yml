############################
#Logic for creating, updating and testing the
#aws resources necessary for making the api backend
#
#1) Runs the cloudformation template to create the necessary resources
#2) Runs python coverage function to generate Auto HTML documentation
##) Runs unit tests of lambda functions, checks aws resources created
#
#
############################
version: 0.2


phases:
  ###########################################
  #Uses a python runtime
  #Note that you do not need the \ to escape
  #aws cli commands
  ###########################################
  install:
    runtime-versions:
       python: 3.7
    commands:
      - echo Entered the install phase...
      - BUILD_ENVIRONMENT=dev-ratings
      - BACKUP_DYNAMODB_FUNCTION_NAME="${BUILD_ENVIRONMENT}-backend-backup-dynamodb"
      - LAMBDA_FUNCTION_NAME="${BUILD_ENVIRONMENT}-backend-lambda-poll"
      - RATINGS_UPDATE_STACK="${BUILD_ENVIRONMENT}-backend"      
      - pip install -r tests/requirements_backend.txt
  build:
    commands:
      - echo Defined build variables
      - echo $BUILD_ENVIRONMENT
      - echo $BACKUP_DYNAMODB_FUNCTION_NAME
      - echo $LAMBDA_FUNCTION_NAME
      - echo $RATINGS_UPDATE_STACK


      - echo "Creating $RATINGS_UPDATE_STACK"
      - aws cloudformation create-stack --stack-name $RATINGS_UPDATE_STACK
          --template-body file://templates/ratings_backend.yml
          --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM

      #Waits until the stack has been successfully created
      - aws cloudformation wait stack-create-complete
        --stack-name $RATINGS_UPDATE_STACK



      #Running reddit rating tests
      - python -m unittest tests/test_reddit_ratings.py

      #running dynamodb backup unit tests
      - python -m unittest tests.test_backup_dynamodb_ratings.LambdaHandler
      - python -m unittest tests.test_backup_dynamodb_ratings.BackupDynamoDbUnit

      #Creating Deployment package for lambda dependencies
      - mkdir deploypkg

      #install dependencies into local deploypkg folder
      - pip install --target ./deploypkg requests

      - pip install --target ./deploypkg bs4

      #copy runtime script to deployment package
      - cp scripts/reddit_ratings.py deploypkg

      - cd deploypkg

      #zip depenedencies and source code in directory
      - zip -r9 built_lambda.zip .

      - cd ..

      - zip -g built_lambda.zip scripts/reddit_ratings.py

      #updates zip deployment package
      - aws lambda update-function-code
        --function-name $LAMBDA_FUNCTION_NAME
        --zip-file fileb://deploypkg/built_lambda.zip

      #changes lambda handler to scripts/reddit_ratings.py
      #lambda_handler function
      - aws lambda update-function-configuration
        --function-name $LAMBDA_FUNCTION_NAME
        --handler "reddit_ratings.lambda_handler"


      #syncronously invoke the lambda function once
      #with cloudwatch timer event payload
      - aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME
        --payload file://util/lambda_cw_event.json
        "${LAMBDA_FUNCTION_NAME}_output.json"


      #####################################
      #Build backup lambda function 
      #(no dependencies other than built ins and the aws python sdk)
      #
      #-j = junk path, exclude file path
      #####################################
      - zip -j9 backup_dynamodb_ratings.zip scripts/backup_dynamodb_ratings.py
      
      #updates zip deployment package
      - aws lambda update-function-code
        --function-name $BACKUP_DYNAMODB_FUNCTION_NAME
        --zip-file fileb://backup_dynamodb_ratings.zip

      #changes lambda handler to scripts/backup_dynamodb_ratings.py
      #lambda_handler function
      - aws lambda update-function-configuration
        --function-name $BACKUP_DYNAMODB_FUNCTION_NAME
        --handler "backup_dynamodb_ratings.lambda_handler"    

      #syncronously invoke the lambda function once
      #with cloudwatch timer event payload
      - aws lambda invoke --function-name $BACKUP_DYNAMODB_FUNCTION_NAME
        --payload file://util/lambda_cw_event.json
        "${BACKUP_DYNAMODB_FUNCTION_NAME}_output.json"


      - python -m unittest tests/test_dev_ratings_backend.py

  post_build:
    commands:
      - echo cleaning up resources

      - aws cloudformation delete-stack --stack-name $RATINGS_UPDATE_STACK

artifacts:
  files:
    ##########################
    #Adds the successfully built/tested lambda function as an 
    #artifact for the prod stage to deploy 
    ##########################
    - 'deploypkg/built_lambda.zip'
    #backup function artifact
    - 'backup_dynamodb_ratings.zip'
  name: BuildDevBackend
